%% -*- erlang -*-

%% @doc Wiggle allows caching of objects, please be aware
%% that caching data will increase the chacne of stale data.
%% However it can increase performance significantly. Different
%% objects have different 'lifetimes' so different timeouts
%% apply. Setting the timeout to 0 will disable caching.
%%
%% However stale data served by wiggle does NOT mean stale data
%% within FiFo.
%%
%% Wiggle will automatically invalidate the cache when a action is taken
%% that means when someone changes a setting it should be directy reflectd.


%% @doc The list will likely change more often then a single entry
%% so we adjust the TTL by a percentage.
%%
%% A value of 50% would mean the half the TTL.
%% List caching currently is only available for:
%% * datasets
%% * packages
%% * networks
%% * groupings
{mapping, "ttl.list_percentage", "wiggle.cache_list_percentage",
 [{default, 0.5},
  {datatype, {percent, float}}]}.

%% @doc Grace period for cache, within this period the original value will
%% will returnd but teh value evicted and read again asyncronously.
%%
%% A value of 100% would mean the grace period is twice the timeout.
{mapping, "ttl.grace_period", "wiggle.cache_grace_period",
 [{default, 0.5},
  {datatype, {percent, float}}]}.

%% @doc The time how long permissions for a token are cached,
%% this seriously improves quick successive requests.
{mapping, "ttl.token", "wiggle.token_ttl",
 [{default, "1s"},
  {datatype, {duration, ms}}]}.

%% @doc Packages pretty much never change so a high TTL is possible.
{mapping, "ttl.package", "wiggle.package_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

%% @doc Datasets pretty much never change so a high TTL is possible.
{mapping, "ttl.dataset", "wiggle.dataset_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

%% @doc DTrace Scripts pretty much never change so a high TTL is possible.
{mapping, "ttl.dtrace", "wiggle.dtrace_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

%% @doc Chunter updates services every 10s by default setting the TTL
%% to X means stale service state will be 10s+X (i.e. 20s)
{mapping, "ttl.hypervisor", "wiggle.hypervisor_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

%% @doc IPranges only change when a Ip was claimed some delay is accaptable here
{mapping, "ttl.iprange", "wiggle.iprange_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

%% @doc Networks barely ever change
{mapping, "ttl.network", "wiggle.networks_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

%% @doc Orgs barely ever change too

{mapping, "ttl.org", "wiggle.org_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

%% @doc Roles barely ever change too
{mapping, "ttl.role", "wiggle.role_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

%% @doc Users barely change either
{mapping, "ttl.user", "wiggle.user_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

%% @doc VMs can change rather frequently so we don't cache them by default
{mapping, "ttl.vm", "wiggle.vm_ttl",
 [{default, "0.1s"},
  {datatype, {duration, ms}}]}.

%% @doc Groupings change sometimes so we can't have a long TTL
{mapping, "ttl.grouping", "wiggle.grouping_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.


%% @doc Enable or disable compression
{mapping, "compression", "wiggle.compression",
 [{default, on},
  {datatype, {enum, [on, off]}}]}.

{translation,
 "wiggle.compression",
 fun(Conf) ->
         case cuttlefish:conf_get("compression", Conf) of
             on ->
                 true;
             _ ->
                 false
         end
 end
}.

%% @doc The port wiggle listens to.
{mapping, "port", "wiggle.port",
 [{default, 8080},
  {datatype, integer}]}.

%% @doc Enable or disable SSL compression
{mapping, "ssl", "wiggle.ssl",
 [{default, on},
  {datatype, {enum, [on, off, spdy]}}]}.

{translation,
 "wiggle.ssl",
 fun(Conf) ->
         case cuttlefish:conf_get("ssl", Conf) of
             on ->
                 true;
             spdy ->
                 spdy;
             _ ->
                 false
         end
 end
}.

%% @doc The port wiggle listens to.
{mapping, "ssl.port", "wiggle.ssl_port",
 [{default, 8443},
  {datatype, integer}]}.

%% @doc The SSL CA certificate.
{mapping, "ssl.cacertfile", "wiggle.ssl_cacertfile",
 [{default, "/var/db/fifo/fifo.crt"},
  {datatype, string}]}.

%% @doc The SSL Server certificate
{mapping, "ssl.certfile", "wiggle.ssl_certfile",
 [{default, "/var/db/fifo/fifo.pem"},
  {datatype, string}]}.

%% @doc The SSL Key file
{mapping, "ssl.keyfile", "wiggle.ssl_keyfile",
 [{default, "/var/db/fifo/fifo.key"},
  {datatype, string}]}.

%% @doc Number of acceptor processes that are keeped ready
{mapping, "acceptors", "wiggle.acceptors",
 [{default, 100},
  {datatype, integer}]}.

%% @doc The TCP IP that mdns messages arrive to.
{mapping, "listening_ip", "mdns_client_lib.interface",
 [{default, "127.0.0.1"},
  {datatype, string}]}.

{translation,
 "mdns_client_lib.interface",
 fun(Conf) ->
         IP = cuttlefish:conf_get("listening_ip", Conf), 
         [A, B, C, D] = [list_to_integer(O) ||
                            O <- re:split(IP, "\\.", [{return, list}])],
         {ok, {A, B, C, D}}
 end
}.
